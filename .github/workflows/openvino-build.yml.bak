name: Build OpenVINO Addons

on:
  push:
    branches: [ master, openvino-integration ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]

jobs:
  build-openvino-addons:
    strategy:
      matrix:
        include:
          - os: windows-2022
            arch: x64
            addon_name: addon-windows-openvino.node
            openvino_url: "https://storage.openvinotoolkit.org/repositories/openvino/packages/2024.6/windows/w_openvino_toolkit_windows_2024.6.0.17404.4c0f47d2335_x86_64.zip"
            openvino_dir: "w_openvino_toolkit_windows_2024.6.0.17404.4c0f47d2335_x86_64"
            setup_script: "setupvars.bat"
          - os: ubuntu-22.04  
            arch: x64
            addon_name: addon-linux-openvino.node
            openvino_url: "https://storage.openvinotoolkit.org/repositories/openvino/packages/2024.6/linux/l_openvino_toolkit_ubuntu22_2024.6.0.17404.4c0f47d2335_x86_64.tgz"
            openvino_dir: "l_openvino_toolkit_ubuntu22_2024.6.0.17404.4c0f47d2335_x86_64"
            setup_script: "setupvars.sh"
          - os: macos-15
            arch: arm64
            addon_name: addon-macos-arm-openvino.node
            openvino_url: "https://storage.openvinotoolkit.org/repositories/openvino/packages/2024.6/macos/m_openvino_toolkit_macos_12_6_2024.6.0.17404.4c0f47d2335_arm64.tgz"
            openvino_dir: "m_openvino_toolkit_macos_12_6_2024.6.0.17404.4c0f47d2335_arm64"
            setup_script: "setupvars.sh"
          - os: macos-13
            arch: x64
            addon_name: addon-macos-x86-openvino.node
            openvino_url: "https://storage.openvinotoolkit.org/repositories/openvino/packages/2024.6/macos/m_openvino_toolkit_macos_12_6_2024.6.0.17404.4c0f47d2335_x86_64.tgz"
            openvino_dir: "m_openvino_toolkit_macos_12_6_2024.6.0.17404.4c0f47d2335_x86_64"
            setup_script: "setupvars.sh"

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install cmake-js
        run: npm install -g cmake-js --silent
          
      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake -y
          
      - name: Download and Install OpenVINO (Windows)
        if: runner.os == 'Windows'
        run: |
          curl -L -o openvino.zip "${{ matrix.openvino_url }}"
          7z x openvino.zip
          echo "OPENVINO_INSTALL_DIR=${{ github.workspace }}/${{ matrix.openvino_dir }}" >> $env:GITHUB_ENV
          
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libtbb-dev libtbb2 cmake build-essential
          
      - name: Download and Install OpenVINO (Linux)
        if: runner.os == 'Linux'
        run: |
          curl -L -o openvino.tgz "${{ matrix.openvino_url }}"
          tar -xzf openvino.tgz
          echo "OPENVINO_INSTALL_DIR=${{ github.workspace }}/${{ matrix.openvino_dir }}" >> $GITHUB_ENV
          
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install tbb cmake
          
      - name: Download and Install OpenVINO (macOS)
        if: runner.os == 'macOS'
        run: |
          curl -L -o openvino.tgz "${{ matrix.openvino_url }}"
          tar -xzf openvino.tgz
          echo "OPENVINO_INSTALL_DIR=${{ github.workspace }}/${{ matrix.openvino_dir }}" >> $GITHUB_ENV
          
      - name: Setup OpenVINO Environment (Windows)
        if: runner.os == 'Windows'
        run: |
          cd "${{ env.OPENVINO_INSTALL_DIR }}"
          call "${{ matrix.setup_script }}"
        shell: cmd
          
      - name: Setup OpenVINO Environment (Unix)
        if: runner.os != 'Windows'
        run: |
          cd "${{ env.OPENVINO_INSTALL_DIR }}"
          source "${{ matrix.setup_script }}"
          # Add OpenVINO libraries to environment
          echo "OPENVINO_LIB_PATHS=${{ env.OPENVINO_INSTALL_DIR }}/runtime/lib/intel64:${{ env.OPENVINO_INSTALL_DIR }}/runtime/3rdparty/tbb/lib" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${{ env.OPENVINO_INSTALL_DIR }}/runtime/lib/intel64:${{ env.OPENVINO_INSTALL_DIR }}/runtime/3rdparty/tbb/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "OpenVINO_DIR=${{ env.OPENVINO_INSTALL_DIR }}/runtime/cmake" >> $GITHUB_ENV
          echo "OpenVINO environment initialized with library paths"
          
      - name: Validate Environment
        if: runner.os != 'Windows'
        continue-on-error: true
        run: |
          chmod +x scripts/validate-workflow-environment.sh
          ./scripts/validate-workflow-environment.sh || echo "⚠️ Validation completed with warnings (non-blocking)"
          
      - name: Build Whisper.cpp with OpenVINO (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake -B build -DWHISPER_OPENVINO=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_STATIC=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DOpenVINO_DIR="${{ env.OPENVINO_INSTALL_DIR }}/runtime/cmake" -DCMAKE_PREFIX_PATH="${{ env.OPENVINO_INSTALL_DIR }}/runtime/cmake"
          cmake --build build -j --config Release
        shell: cmd
        
      - name: Build Whisper.cpp with OpenVINO (Unix)
        if: runner.os != 'Windows'
        run: |
          # Configure with proper OpenVINO and TBB paths
          cmake -B build \
            -DWHISPER_OPENVINO=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DWHISPER_STATIC=ON \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DOpenVINO_DIR="${{ env.OPENVINO_INSTALL_DIR }}/runtime/cmake" \
            -DCMAKE_PREFIX_PATH="${{ env.OPENVINO_INSTALL_DIR }}/runtime/cmake"
          
          # Build with proper library paths
          export LD_LIBRARY_PATH="${{ env.OPENVINO_INSTALL_DIR }}/runtime/lib/intel64:${{ env.OPENVINO_INSTALL_DIR }}/runtime/3rdparty/tbb/lib:$LD_LIBRARY_PATH"
          cmake --build build -j --config Release
          
      - name: Install Node.js Dependencies
        run: |
          cd examples/addon.node
          npm install --silent
          
      - name: Build Node.js Addon (Windows)
        if: runner.os == 'Windows'
        run: |
          cd examples/addon.node
          call "${{ env.OPENVINO_INSTALL_DIR }}/${{ matrix.setup_script }}"
          echo "Building Node.js addon with cmake-js..."
          npx cmake-js rebuild ^
            --runtime=electron ^
            --runtime-version=30.1.0 ^
            --arch=${{ matrix.arch }} ^
            --CDWHISPER_OPENVINO=ON ^
            --CDBUILD_SHARED_LIBS=OFF ^
            --CDWHISPER_STATIC=ON ^
            --CDCMAKE_POSITION_INDEPENDENT_CODE=ON ^
            --CDOpenVINO_DIR="${{ env.OPENVINO_INSTALL_DIR }}/runtime/cmake" ^
            --CDCMAKE_PREFIX_PATH="${{ env.OPENVINO_INSTALL_DIR }}/runtime/cmake"
          if %errorlevel% neq 0 (
            echo "cmake-js build failed with error level %errorlevel%"
            exit 1
          )
          echo "cmake-js build completed successfully"
        shell: cmd
          
      - name: Build Node.js Addon (Unix)
        if: runner.os != 'Windows'
        run: |
          cd examples/addon.node
          source "${{ env.OPENVINO_INSTALL_DIR }}/${{ matrix.setup_script }}"
          export LD_LIBRARY_PATH="${{ env.OPENVINO_INSTALL_DIR }}/runtime/lib/intel64:${{ env.OPENVINO_INSTALL_DIR }}/runtime/3rdparty/tbb/lib:$LD_LIBRARY_PATH"
          npx cmake-js rebuild \
            --runtime=electron \
            --runtime-version=30.1.0 \
            --arch=${{ matrix.arch }} \
            --CDWHISPER_OPENVINO=ON \
            --CDBUILD_SHARED_LIBS=OFF \
            --CDWHISPER_STATIC=ON \
            --CDCMAKE_POSITION_INDEPENDENT_CODE=ON \
            --CDOpenVINO_DIR="${{ env.OPENVINO_INSTALL_DIR }}/runtime/cmake" \
            --CDCMAKE_PREFIX_PATH="${{ env.OPENVINO_INSTALL_DIR }}/runtime/cmake" \
            --CDCMAKE_MODULE_PATH="${{ github.workspace }}/cmake"
          
      - name: Verify Addon Build (Windows)
        if: runner.os == 'Windows'
        run: |
          cd examples/addon.node
          dir build\bin\Release\
        shell: cmd
          
      - name: Verify Addon Build (Unix)
        if: runner.os != 'Windows'
        run: |
          cd examples/addon.node
          ls -la build/Release/
          
      - name: Copy and Rename Addon (Windows)
        if: runner.os == 'Windows'
        run: |
          cd examples/addon.node
          if exist build\bin\Release\addon.node (
            copy build\bin\Release\addon.node ${{ matrix.addon_name }}
            echo "Successfully copied addon.node"
          ) else (
            echo "ERROR: addon.node not found in build\bin\Release\"
            echo "Available files:"
            dir build\bin\Release\
            exit 1
          )
        shell: cmd
          
      - name: Copy and Rename Addon (Unix)
        if: runner.os != 'Windows'
        run: |
          cd examples/addon.node
          cp build/Release/addon.node ${{ matrix.addon_name }}
          
      - name: Upload Addon Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.addon_name }}
          path: examples/addon.node/${{ matrix.addon_name }}
          retention-days: 30
          

  create-release:
    needs: build-openvino-addons
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/openvino-integration'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Extract version information
        id: version_info
        run: |
          # Extract OpenVINO version dynamically from workflow matrix
          OPENVINO_URL=$(grep -A 10 "os: windows-2022" .github/workflows/openvino-build.yml | grep "openvino_url:" | sed 's/.*openvino_url: "//' | sed 's/".*//')
          
          # Extract full version (e.g., 2024.6.0.17404.4c0f47d2335)
          OPENVINO_VERSION=$(echo "$OPENVINO_URL" | grep -oP '\d{4}\.\d+\.\d+\.\d+\.[a-f0-9]+' | head -1)
          
          # Extract major.minor version for display (e.g., 2024.6)
          OPENVINO_DISPLAY_VERSION=$(echo "$OPENVINO_VERSION" | grep -oP '^\d{4}\.\d+')
          
          # Extract Electron and Node versions dynamically from workflow  
          ELECTRON_VERSION=$(grep -A 20 "Build Node.js Addon" .github/workflows/openvino-build.yml | grep "runtime-version=" | sed 's/.*runtime-version=//' | sed 's/ .*//' | head -1)
          NODE_VERSION=$(grep -A 5 "Setup Node.js" .github/workflows/openvino-build.yml | grep "node-version:" | sed 's/.*node-version: //' | sed "s/'//g")
          NODE_VERSION="${NODE_VERSION}.x"
          
          # Create timestamp
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
          
          echo "openvino_version=$OPENVINO_VERSION" >> $GITHUB_OUTPUT
          echo "openvino_display_version=$OPENVINO_DISPLAY_VERSION" >> $GITHUB_OUTPUT
          echo "electron_version=$ELECTRON_VERSION" >> $GITHUB_OUTPUT
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "tag_name=v$(date '+%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          
      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -name "*.node" -exec ls -la {} \;
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_info.outputs.tag_name }}
          release_name: "Whisper OpenVINO addon - ${{ steps.version_info.outputs.timestamp }}"
          body: |
            # Whisper.cpp OpenVINO Node.js Addons
            
            Cross-platform Node.js addons with OpenVINO GPU acceleration support for whisper.cpp.
            
            ## 🚀 What's Included
            
            - **Windows x64**: `addon-windows-openvino.node`
            - **Linux x64**: `addon-linux-openvino.node`  
            - **macOS ARM64**: `addon-macos-arm-openvino.node`
            - **macOS x64**: `addon-macos-x86-openvino.node`
            
            ## 📋 Compatibility
            
            - **OpenVINO**: ${{ steps.version_info.outputs.openvino_display_version }} (build ${{ steps.version_info.outputs.openvino_version }})
            - **Electron**: ${{ steps.version_info.outputs.electron_version }}
            - **Node.js**: ${{ steps.version_info.outputs.node_version }}
            
            ## 💾 Installation
            
            1. Download the appropriate `.node` file for your platform
            2. Place it in your project directory
            3. Load it in your Node.js/Electron application
            
            ## 🔧 Usage
            
            ```javascript
            // Load the appropriate addon for your platform
            const whisper = require('./addon-[platform]-openvino.node');
            ```
            
            ## 🏗️ Build Information
            
            - **Built**: ${{ steps.version_info.outputs.timestamp }}
            - **Commit**: ${{ github.sha }}
            - **Branch**: ${{ github.ref_name }}
            
            ---
            
            *These addons enable GPU-accelerated speech recognition using Intel OpenVINO toolkit.*
          draft: false
          prerelease: false
          
      - name: Upload Windows Addon
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/addon-windows-openvino.node/addon-windows-openvino.node
          asset_name: addon-windows-openvino.node
          asset_content_type: application/octet-stream
          
      - name: Upload Linux Addon
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/addon-linux-openvino.node/addon-linux-openvino.node
          asset_name: addon-linux-openvino.node
          asset_content_type: application/octet-stream
          
      - name: Upload macOS ARM Addon
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/addon-macos-arm-openvino.node/addon-macos-arm-openvino.node
          asset_name: addon-macos-arm-openvino.node
          asset_content_type: application/octet-stream
          
      - name: Upload macOS x64 Addon
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/addon-macos-x86-openvino.node/addon-macos-x86-openvino.node
          asset_name: addon-macos-x86-openvino.node
          asset_content_type: application/octet-stream
          
      - name: Create build summary
        run: |
          echo "# 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release**: [${{ steps.version_info.outputs.tag_name }}](${{ steps.create_release.outputs.html_url }})" >> $GITHUB_STEP_SUMMARY
          echo "**Title**: Whisper OpenVINO addon - ${{ steps.version_info.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Uploaded Addons" >> $GITHUB_STEP_SUMMARY
          echo "- Windows x64: addon-windows-openvino.node" >> $GITHUB_STEP_SUMMARY
          echo "- Linux x64: addon-linux-openvino.node" >> $GITHUB_STEP_SUMMARY  
          echo "- macOS ARM: addon-macos-arm-openvino.node" >> $GITHUB_STEP_SUMMARY
          echo "- macOS x86: addon-macos-x86-openvino.node" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔧 Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- OpenVINO: ${{ steps.version_info.outputs.openvino_display_version }} (build ${{ steps.version_info.outputs.openvino_version }})" >> $GITHUB_STEP_SUMMARY
          echo "- Electron: ${{ steps.version_info.outputs.electron_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js: ${{ steps.version_info.outputs.node_version }}" >> $GITHUB_STEP_SUMMARY